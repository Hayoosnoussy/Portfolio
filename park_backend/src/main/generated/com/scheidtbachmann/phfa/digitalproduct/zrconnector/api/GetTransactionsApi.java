/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.scheidtbachmann.phfa.digitalproduct.zrconnector.api;

import com.scheidtbachmann.phfa.digitalproduct.zrconnector.model.RequestDataDTO;
import com.scheidtbachmann.phfa.digitalproduct.zrconnector.model.ResponseCodeDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-31T15:56:35.474500200+01:00[Africa/Tunis]")
@Validated
@Api(value = "getTransactions", description = "the getTransactions API")
public interface GetTransactionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /getTransactions : get active transactions (@Asyn) (Check present data + late payments transactions of same operator)
     *
     * @param xSampBSelfCheckoutApp  (required)
     * @param requestDataDTO  (required)
     * @param correlationId  (optional)
     * @return successful operation, response data is. The result of request will be provided via websocket and Kafka message (status code 202)
     *         or BAD Request!!! (status code 400)
     *         or NOT authorized !!! (status code 401)
     *         or ERROR (status code 200)
     */
    @ApiOperation(value = "get active transactions (@Asyn) (Check present data + late payments transactions of same operator)", nickname = "checkTransactionsPUT", notes = "", response = ResponseCodeDTO.class, tags={ "CheckTransactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "successful operation, response data is. The result of request will be provided via websocket and Kafka message", response = ResponseCodeDTO.class),
        @ApiResponse(code = 400, message = "BAD Request!!!"),
        @ApiResponse(code = 401, message = "NOT authorized !!!"),
        @ApiResponse(code = 200, message = "ERROR", response = ResponseCodeDTO.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/getTransactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseCodeDTO> checkTransactionsPUT(@ApiParam(value = "", required = true, defaultValue = "SampB-SelfCheckout-2022") @RequestHeader(value = "X-SampB-SelfCheckout-App", required = true) String xSampBSelfCheckoutApp,@ApiParam(value = "", required = true) @Valid @RequestBody RequestDataDTO requestDataDTO,@ApiParam(value = "") @RequestHeader(value = "correlationId", required = false) String correlationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"2021-08-23T16:08:27.000[GMT]\", \"code\" : \"ERROR_CODE\", \"message\" : \"text message of the action/error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
